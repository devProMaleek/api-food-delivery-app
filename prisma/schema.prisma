// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Define your data model
model Restaurant {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  address String
  phone   String?

  menuItems MenuItem[]
}

model MenuItem {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String?
  price        Float
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  restaurantId String     @db.ObjectId

  orders OrderItem[]
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  status     OrderStatus @default(PENDING)
  createdAt  DateTime    @default(now())
  total      Float
  customer   Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customerId String      @db.ObjectId

  items OrderItem[]
}

model OrderItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity   Int
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  menuItemId String   @db.ObjectId
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId    String   @db.ObjectId
}

model Customer {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String    @unique
  password       String
  hashedPassword String?
  emailVerified  DateTime?
  phone          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  orders   Order[]
  accounts Account[]
  sessions Session[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  customerId        String? @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  Customer Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  customerId   String?   @db.ObjectId
  sessionToken String    @unique
  expires      DateTime
  Customer     Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}
